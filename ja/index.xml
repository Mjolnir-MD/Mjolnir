<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Mjolnir documentation</title><link>http://mjolnir-md.github.io/Mjolnir/ja/</link><description>Recent content in Introduction on Mjolnir documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://mjolnir-md.github.io/Mjolnir/ja/index.xml" rel="self" type="application/rss+xml"/><item><title>The Lennard-Jones fluid</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/tutorial/lennard-jones/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/tutorial/lennard-jones/</guid><description>The Lennard-Jones fluid # 簡単な例として、Lennard-Jonesポテンシャルで相互作用する粒子のシミュレーションをしてみましょう。 あまり時間がかかるシミュレーションにしたくないので、8x8x8の512粒子の系を考えることにします。 特に具体的な何かの原子をシミュレーションしたいというわけではないので、パラメータは適当に決めていきます。
このシミュレーションに必要なものは、大まかに
どのような方法でシミュレーションするか 初期構造 ポテンシャルのパラメータ です。lennard-jones.tomlというファイルを作って、この順に実際に入力を書いていきましょう。
[files] and [units] # 具体的な設定を埋めていく前に、細々とした設定を先に済ませておきます。
まず、出力ファイルの名前とフォーマットを決めましょう。 名前はそのままlennard-jonesに、出力先はカレントディレクトリ、フォーマットはxyzにします。
[files] output.prefix = &amp;#34;lennard-jones&amp;#34; output.path = &amp;#34;./&amp;#34; output.format = &amp;#34;xyz&amp;#34; 他に何が設定できるかは、Referenceのfilesを見てください。
今後の入力で使う数値の単位系も決めないといけません。 ここでは、エネルギーの単位はkcal/mol、長さの単位はangstromにします。
[units] length = &amp;#34;angstrom&amp;#34; energy = &amp;#34;kcal/mol&amp;#34; 他に何が設定できるかは、Referenceのunitsを見てください。
[simulator] and other general properties # さて、一般的な部分の設定は済ませたので、いよいよシミュレーションをどのように行うかを設定します。
まず、今から行うのは普通の分子動力学シミュレーションなので、方法はMolecularDynamicsです。 浮動小数点数の型には倍精度を、境界条件にはPeirodicを適用します。 それと、乱数シードを適当に決めておいてください。
[simulator] type = &amp;#34;MolecularDynamics&amp;#34; precision = &amp;#34;double&amp;#34; boundary_type = &amp;#34;Periodic&amp;#34; seed = 123456789 あとは、時間発展をどうやって、どの程度行うかを決めます。
ここでは、ランジュバン方程式の時間積分法のうち、比較的最近提案されたBAOAB Langevin integratorを使うことにしましょう。 ここでは摩擦係数を粒子ごとに設定することができますが、今回は均質な系にするので、とりあえず全部1にしてしまいましょう。</description></item><item><title>A simple polymer model</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/tutorial/polymer-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/tutorial/polymer-model/</guid><description>A simple polymer model # 前回に続いて、今度は局所的な相互作用の設定方法を、簡単なポリマーのシミュレーションを通して説明します。
今回は100個の粒子を調和振動子ポテンシャルで繋げてみます。 簡単のため、初めは繋がっていない粒子に非局所的な相互作用はないとします。
[files] and [units] # 前回と同様、細々とした設定を先に済ませてしまいましょう。
まずは、出力ファイルの名前とフォーマットを決めます。
[files] output.prefix = &amp;#34;polymer-model&amp;#34; output.path = &amp;#34;./&amp;#34; output.format = &amp;#34;xyz&amp;#34; 他に何が設定できるかは、Referenceのfilesを見てください。
単位は、kcal/molとangstromにします。
[units] length = &amp;#34;angstrom&amp;#34; energy = &amp;#34;kcal/mol&amp;#34; 他に何が設定できるかは、Referenceのunitsを見てください。
[simulator] # ここもほぼ前回と同じです。
ですが、今回は全ての粒子が繋がっていて、遠くに離れていく心配がないので、周期境界条件をなくしてみましょう。
[simulator] type = &amp;#34;MolecularDynamics&amp;#34; precision = &amp;#34;double&amp;#34; boundary_type = &amp;#34;Unlimited&amp;#34; # No periodic boundary seed = 123456789 delta_t = 0.01 total_step = 1_000_000 save_step = 1_000 integrator.type = &amp;#34;BAOABLangevin&amp;#34; integrator.</description></item><item><title>BAOABLangevin</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/integrators/BAOABLangevinIntegrator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/integrators/BAOABLangevinIntegrator/</guid><description>BAOABLangevin # ランジュバン方程式に従い、温度・体積・粒子数 (NVT) 一定のシミュレーションを行います。
\[m\frac{d^2 \bold{r}}{dt^2} = \bold{f}(\bold{r}) - m\gamma\bold{v} &amp;#43; \beta(t)\] 以下の論文で提案された手法です。
Benedict Leimkuhler and Charles Matthews. Appl. Math. Res. Exp. (2013) 2013:1, pp. 34-56 Benedict Leimkuhler and Charles Matthews. J. Chem. Phys. (2013) 138:17, 174102 例 # [simulator] integrator.type = &amp;#34;BAOABLangevin&amp;#34; integrator.gammas = [ {index = 0, gamma = 1.0}, {index = 1, gamma = 1.0}, # .</description></item><item><title>MolecularDynamics</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/simulators/MolecularDynamicsSimulator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/simulators/MolecularDynamicsSimulator/</guid><description>MolecularDynamics # 通常の分子動力学シミュレーションを行うシミュレータです。
systemを一つ、forcefieldを一つ要求します。
Example # [simulator] type = &amp;#34;MolecularDynamics&amp;#34; boundary_type = &amp;#34;PeriodicCuboid&amp;#34; precision = &amp;#34;double&amp;#34; parallelism = &amp;#34;OpenMP&amp;#34; # optional seed = 12345 delta_t = 0.1 total_step = 50_000 save_step = 100 integrator.type = &amp;#34;VelocityVerlet&amp;#34; Input Reference # type: 文字列型 シミュレータの種類を指定します。このシミュレータを使う場合、&amp;quot;MolecularDynamics&amp;quot;です。 boundary_type: 文字列型 境界条件の種類を指定します。具体的な大きさは[[systems]]で指定します。 &amp;quot;Unlimited&amp;quot;: 境界条件を設定しません。シミュレーションボックスは無限大の大きさになります。 &amp;quot;PeriodicCuboid&amp;quot;: 直方体型の周期境界条件を指定します。 precision: 文字列型 シミュレーションに用いる浮動小数点数型の種類を指定します。 &amp;quot;float&amp;quot;: 32bit浮動小数点数を使用します。 &amp;quot;double&amp;quot;: 64bit浮動小数点数を使用します。 parallelism: 文字列型(省略可。デフォルトで並列化なし) 並列化する際の実装を選択します。 &amp;quot;OpenMP&amp;quot;: OpenMPを使った実装を使用します。 &amp;quot;sequencial&amp;quot;: 並列化を行いません。省略した場合はこれが選択されます。 seed: 整数型 乱数生成器の初期化に用いるシードを設定します。 delta_t: 浮動小数点数型 シミュレーションの時間刻みを指定します。 時間の単位は[units]で指定した単位系に依存します。 total_step: 整数型 実行するステップ数を指定します。 save_step: 整数型 何ステップおきに状態を出力するか指定します。 integrator: テーブル型 時間積分の方法を指定します。積分方法によって必要なパラメータが異なります。 以下のアルゴリズムが使用可能です。 &amp;ldquo;BAOABLangevin&amp;rdquo; &amp;ldquo;g-BAOABLangevin&amp;rdquo; &amp;ldquo;UnderdampedLangevin&amp;rdquo; &amp;ldquo;VelocityVerlet&amp;rdquo; 参考：integrators.</description></item><item><title>g-BAOABLangevin</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/integrators/gBAOABLangevinIntegrator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/integrators/gBAOABLangevinIntegrator/</guid><description>g-BAOABLangevin # ランジュバン方程式に従い、温度・体積・粒子数 (NVT) 一定のシミュレーションを行います。
BAOABLangevinと異なり、結合長に対する拘束条件を取り扱うことができます。
以下の論文で提案された手法です。
Leimkuhler B, Matthews C. Proc. R. Soc. A. (2016) 例 # [simulator] # ... integrator.type = &amp;#34;g-BAOABLangevin&amp;#34; integrator.gammas = [ {index = 0, gamma = 1.0}, {index = 1, gamma = 1.0}, # ... ] 入力 # delta_tなどの他のパラメータはSimulatorで設定します。
type: 文字列型 Integratorの種類を指定します。&amp;quot;g-BAOABLangevin&amp;quot;です。 gammas: テーブルの配列型 粒子の摩擦係数 \(\gamma_i\) を指定します。 remove: テーブル型 (optional) translation: 論理値型 trueの場合、毎ステップ、系全体の並進速度成分を取り除きます。 rotation: 論理値型 trueの場合、毎ステップ、系全体の回転速度成分を取り除きます。 rescale: 論理値型 trueになっていた場合、全体の速度ベクトルをリスケールすることで速度を減算した分の運動エネルギーを補填します。 省略した場合、全てfalseになります。 Remarks # This feature is developed by contributor, @yutakasi634.</description></item><item><title>SimulatedAnnealing</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/simulators/SimulatedAnnealingSimulator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/simulators/SimulatedAnnealingSimulator/</guid><description>SimulatedAnnealing # 焼きなまし（Simulated Annealing）法のためのシミュレータです。
systemを一つ、forcefieldを一つ要求します。
Example # [simulator] type = &amp;#34;SimulatedAnnealing&amp;#34; boundary_type = &amp;#34;Unlimited&amp;#34; precision = &amp;#34;double&amp;#34; parallelism = &amp;#34;OpenMP&amp;#34; # optional delta_t = 0.1 total_step = 50_000 save_step = 100 each_step = 100 schedule.type = &amp;#34;linear&amp;#34; schedule.begin = 300.0 # temperature in [K] schedule.end = 150.0 # temperature in [K] integrator.type = &amp;#34;UnderdampedLangevin&amp;#34; integrator.parameters = [ # ... ] Input Reference # type: 文字列型 シミュレータの種類を指定します。このシミュレータを使う場合、&amp;quot;SimulatedAnnealing&amp;quot;です。 boundary_type: 文字列型 境界条件の種類を指定します。具体的な大きさは[[systems]]で指定します。 &amp;quot;Unlimited&amp;quot;: 境界条件を設定しません。シミュレーションボックスは無限大の大きさになります。 &amp;quot;PeriodicCuboid&amp;quot;: 直方体型の周期境界条件を指定します。 precision: 文字列型 シミュレーションに用いる浮動小数点数型の種類を指定します。 &amp;quot;float&amp;quot;: 32bit浮動小数点数を使用します。 &amp;quot;double&amp;quot;: 64bit浮動小数点数を使用します。 parallelism: 文字列型(省略可) 並列化する際の実装を選択します。 &amp;quot;OpenMP&amp;quot;: OpenMPを使った実装を使用します。 &amp;quot;sequencial&amp;quot;: 並列化を行いません。省略した場合はこれが選択されます。 seed: 整数型 乱数生成器の初期化に用いるシードを設定します。 delta_t: 浮動小数点数型 シミュレーションの時間刻みを指定します。 時間の単位は[units]で指定した単位系に依存します。 total_step: 整数型 実行するステップ数を指定します。 save_step: 整数型 何ステップおきに状態を出力するか指定します。 each_step: 整数型 何ステップおきに温度を変更するか指定します。 schedule: テーブル型 どのように温度を変更するか指定します。 integrator: テーブル型 時間積分の方法を指定します。積分方法によって必要なパラメータが異なります。 &amp;ldquo;BAOABLangevin&amp;rdquo; &amp;ldquo;g-BAOABLangevin&amp;rdquo; &amp;ldquo;UnderdampedLangevin&amp;rdquo; &amp;ldquo;VelocityVerlet&amp;rdquo; 参考：integrators.</description></item><item><title>G-JFLangevin</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/integrators/G-JFLangevinIntegrator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/integrators/G-JFLangevinIntegrator/</guid><description>G-JFLangevin # ランジュバン方程式に従い、温度・体積・粒子数 (NVT) 一定のシミュレーションを行います。
\[m\frac{d^2 \bold{r}}{dt^2} = \bold{f}(\bold{r}) - \alpha\bold{v} &amp;#43; \beta(t)\] 以下の論文で提案された手法です。
Niels Grønbech-Jensen &amp;amp; Oded Farago, (2013) Mol.Phys. 111:8, 983-991 例 # [simulator] # ... integrator.type = &amp;#34;G-JFLangevin&amp;#34; integrator.alphas = [ {index = 0, alpha = 1.0}, {index = 1, alpha = 1.0}, # ... ] 入力 # delta_tなどの他のパラメータはSimulatorで設定します。
type: 文字列型 Integratorの種類を指定します。&amp;quot;G-JFLangevin&amp;quot;です。 alphas: テーブルの配列型 粒子の摩擦係数 \(\alpha_i\) を指定します。 remove: テーブル型 (optional) translation: 論理値型 trueの場合、毎ステップ、系全体の並進速度成分を取り除きます。 rotation: 論理値型 trueの場合、毎ステップ、系全体の回転速度成分を取り除きます。 rescale: 論理値型 trueになっていた場合、全体の速度ベクトルをリスケールすることで速度を減算した分の運動エネルギーを補填します。 省略した場合、全てfalseになります。</description></item><item><title>SteepestDescent</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/simulators/SteepestDescentSimulator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/simulators/SteepestDescentSimulator/</guid><description>SteepestDescent # 最急降下法のためのシミュレータです。
systemを一つ、forcefieldを一つ要求します。
例 # [simulator] type = &amp;#34;SteepestDescent&amp;#34; boundary_type = &amp;#34;Unlimited&amp;#34; precision = &amp;#34;double&amp;#34; delta = 1e-4 threshold = 1e-4 step_limit = 1_000_000 save_step = 100 入力 # 以下のパラメータを取ります。
type: 文字列型 シミュレータの種類を指定します。このシミュレータを使う場合、&amp;quot;SteepestDescent&amp;quot;です。 boundary_type: 文字列型 境界条件の種類を指定します。具体的な大きさはSystemで指定します。 &amp;quot;Unlimited&amp;quot;: 境界条件を設定しません。シミュレーションボックスは無限大の大きさになります。 &amp;quot;PeriodicCuboid&amp;quot;: 直方体型の周期境界条件を指定します。 precision: 文字列型 シミュレーションに用いる浮動小数点数型の種類を指定します。 &amp;quot;float&amp;quot;: 32bit浮動小数点数を使用します。 &amp;quot;double&amp;quot;: 64bit浮動小数点数を使用します。 delta: 浮動小数点数型 一ステップで勾配の大きさのどれだけの割合だけ粒子を動かすかを指定します。 threshold: 浮動小数点数型 一ステップで最も大きく動いた粒子の動きがこれを下回った場合、収束したとして終了します。 step_limit: 整数型 ステップ数の上限を指定します。このステップ数に達すると、収束したかに関わらず終了します。 save_step: 整数型 何ステップおきに状態を出力するか指定します。 この値に関わらず、収束して終了した場合は最終状態が最終ステップとして出力されます。</description></item><item><title>GFWNPTLangevin</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/integrators/GFWNPTLangevinIntegrator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/integrators/GFWNPTLangevinIntegrator/</guid><description>GFWNPTLangevin # ランジュバン方程式に従い、温度・圧力・粒子数 (NPT) 一定のシミュレーションを行います。
\[m\frac{d^2 \bold{r}}{dt^2} = \bold{f}(\bold{r}) - m\gamma\bold{v} &amp;#43; \beta(t)\] 以下の論文で提案された手法です。
Xingyu Gao, Jun Fang, and Han Wang. J. Chem. Phys. (2016) 144, 124113 例 # [simulator] # ... integrator.type = &amp;#34;GFWNPTLangevin&amp;#34; integrator.chi = 0.0 integrator.cell_mass = [1e3, 1e3, 1e3] integrator.cell_gamma = [0.1, 0.1, 0.1] integrator.gammas = [ {index = 0, gamma = 0.1}, {index = 1, gamma = 0.</description></item><item><title>SwitchingForceField</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/simulators/SwitchingForceFieldSimulator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/simulators/SwitchingForceFieldSimulator/</guid><description>SwitchingForceField # あらかじめ決めた時間ステップに使用する力場を変更するシミュレータです。
systemを一つ、forcefieldを複数個（必要なだけ）要求します。
Example # [simulator] type = &amp;#34;SwitchingForceField&amp;#34; boundary_type = &amp;#34;Unlimited&amp;#34; precision = &amp;#34;double&amp;#34; delta_t = 0.1 total_step = 3_000_000 save_step = 100 seed = 2374 integrator.type = &amp;#34;BAOABLangevin&amp;#34; integrator.parameters = [ {index = 0, gamma = 1.00}, {index = 1, gamma = 1.00}, ] schedule = [ {until = 1_000_000, forcefield = &amp;#34;close&amp;#34;}, {until = 2_000_000, forcefield = &amp;#34;open&amp;#34;}, {until = 3_000_000, forcefield = &amp;#34;close&amp;#34;}, ] [[forcefields]] name = &amp;#34;close&amp;#34; [[forcefields.</description></item><item><title>EnergyCalculation</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/simulators/EnergyCalculationSimulator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/simulators/EnergyCalculationSimulator/</guid><description>EnergyCalculation # トラジェクトリファイルからエネルギーを計算するシミュレータです。
ForceFieldを指定して、トラジェクトリファイルのそれぞれのスナップショットでのエネルギーを計算します。
このシミュレータにIntegratorは必要ありません。
また、[[systems]]で指定された座標はトラジェクトリファイルの座標で上書きされます。 ですが、グループや名前の指定のため、[[systems]]自体は必要です。
例 # [simulator] type = &amp;#34;EnergyCalculation&amp;#34; boundary_type = &amp;#34;PeriodicCuboid&amp;#34; precision = &amp;#34;double&amp;#34; parallelism = &amp;#34;OpenMP&amp;#34; # optional file = &amp;#34;example_position.dcd&amp;#34; 入力 # 以下のパラメータを取ります。
type: 文字列型 シミュレータの種類を指定します。このシミュレータを使う場合、&amp;quot;MolecularDynamics&amp;quot;です。 boundary_type: 文字列型 境界条件の種類を指定します。具体的な大きさは[[systems]]で指定します。 &amp;quot;Unlimited&amp;quot;: 境界条件を設定しません。シミュレーションボックスは無限大の大きさになります。 &amp;quot;PeriodicCuboid&amp;quot;: 直方体型の周期境界条件を指定します。 precision: 文字列型 シミュレーションに用いる浮動小数点数型の種類を指定します。 &amp;quot;float&amp;quot;: 32bit浮動小数点数を使用します。 &amp;quot;double&amp;quot;: 64bit浮動小数点数を使用します。 parallelism: 文字列型(省略可) 並列化する際の実装を選択します。 &amp;quot;OpenMP&amp;quot;: OpenMPを使った実装を使用します。 &amp;quot;sequencial&amp;quot;: 並列化を行いません。省略した場合はこれが選択されます。 file: 文字列型 エネルギーを計算するトラジェクトリファイルを指定します。 [files]で指定した入力パスに従います。</description></item><item><title>MultipleBasin</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/MultipleBasinForceField/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/MultipleBasinForceField/</guid><description>MultipleBasinForceField # MultipleBasin モデルによって、複数の異なる力場をスムースにつなげることができます。
粗視化モデルでタンパク質の構造変化を実現するための、力場の強制変更よりも自然な方法として、以下の文献で提案されました。
Kei-ichi Okazaki, Nobuyasu Koga, Shoji Takada, Jose N. Onuchic, and Peter G. Wolynes PNAS (2006) Mjolnirはこれを一般化した形で実装しており、任意の力場を利用できます。
このモデルでは、以下の形で定義された行列の最小固有値として定義される \( V_{MB} \) がかかります。
\[\begin{pmatrix} V_1 &amp;#43; \Delta V_1 &amp;amp; \Delta \\ \Delta &amp;amp; V_2 &amp;#43; \Delta V_2 \end{pmatrix} \begin{pmatrix} c_1 \\ c_2 \end{pmatrix} = V_{MB} \begin{pmatrix} c_1 \\ c_2 \end{pmatrix}\] 固有ベクトルの成分は、それぞれの状態の重みと解釈できます。反応座標として、デフォルトで以下の値が出力されます。
\[\chi = \log\left(\frac{c_2}{c_1}\right)\] \( 0 &amp;lt; \Delta \) の場合、この値が非数になることに注意してください。これを避けるため、Mjolnirでは \(\Delta\) が常に負の値として読み込まれます。 \( V_{MB} \) は \( \Delta^2 \) にしか依存しないため、 \( \Delta \) の符号は結果に影響しません。</description></item><item><title>UnderdampedLangevin</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/integrators/UnderdampedLangevinIntegrator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/integrators/UnderdampedLangevinIntegrator/</guid><description>UnderdampedLangevin # ランジュバン方程式に従い、温度・体積・粒子数一定のシミュレーションを行います。
\[m\frac{d^2 \bold{r}}{dt^2} = \bold{f}(\bold{r}) - m\gamma\bold{v} &amp;#43; \beta(t)\] 以下の論文で提案された手法です。
J. D. Honeycutt and D. Thirumalai, (1992) Biopolymers Z. Guo and D. Thirumalai, (1995) Biopolymers. 例 # [simulator] integrator.type = &amp;#34;UnderdampedLangevin&amp;#34; integrator.gammas = [ {index = 0, gamma = 1.0}, {index = 1, gamma = 1.0}, # ... ] 入力 # delta_tなどの他のパラメータはSimulatorで設定します。
type: 文字列型 Integratorの種類を指定します。&amp;quot;BAOABLangevin&amp;quot;です。 gammas: テーブルの配列型 粒子の摩擦係数 \(\gamma_i\) を指定します。 remove: テーブル型 (optional) translation: 論理値型 trueの場合、毎ステップ、系全体の並進速度成分を取り除きます。 rotation: 論理値型 trueの場合、毎ステップ、系全体の回転速度成分を取り除きます。 rescale: 論理値型 trueになっていた場合、全体の速度ベクトルをリスケールすることで速度を減算した分の運動エネルギーを補填します。 省略した場合、全てfalseになります。</description></item><item><title>HybridForceField</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/HybridForceField/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/HybridForceField/</guid><description>HybridForceField # HybridForceField は二つの異なる力場の線形結合です。
\[V = \lambda V_1 &amp;#43; (1 - \lambda) V_2\] \(\lambda = 1\) のとき、 \(V = V_1\) になることに気を付けてください。
トポロジーは異なっていても問題ありません。異なっている場合、dcdなどのchain数には一つ目のforcefieldが入ります。
例 # まず、二つのforcefieldsを定義します。
その後、[simulator]テーブルでforcefields.type = &amp;quot;Hybrid&amp;quot;と、forcefields.lambdaの値を定義してください。 一番目の[[forcefields]]テーブルが上の式での \( V_1 \) に、二番目が \( V_2 \) になります。
[simulator] type = &amp;#34;MolecularDynamics&amp;#34; boundary_type = &amp;#34;Unlimited&amp;#34; precision = &amp;#34;double&amp;#34; delta_t = 0.1 total_step = 1000000 save_step = 1_000 seed = 2859805901 integrator.type = &amp;#34;BAOABLangevin&amp;#34; integrator.</description></item><item><title>Topology</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/Topology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/Topology/</guid><description>Topology # LocalForceFieldはGlobalForceFieldに影響することがあります。 例えば、結合長ポテンシャルが適用されている粒子同士には排除体積効果が働かない、というケースがあります。
この情報をLocalForceFiledとGlobalForceFieldと共有するため、Topologyクラスがあり、Systemに格納されています。 Topologyクラスには粒子をノード、LocalForceFieldをエッジとしたグラフ構造が格納されており、その上を検索することができます。
LocalForceFieldでは、それぞれに名前を付けてTopologyとして登録することができます。 GlobalForceFieldでは、名前のついたエッジを辿って見つかる粒子を無視することができます。
[[forcefields.local]] interaction = &amp;#34;BondLength&amp;#34; potential = &amp;#34;Harmonic&amp;#34; topology = &amp;#34;bond&amp;#34; parameters = [ {indices = [0, 1], ... }, # ... ] [[forcefields.global]] interaction = &amp;#34;Pair&amp;#34; potential = &amp;#34;ExcludedVolume&amp;#34; ignore.particles_within.bond = 3 # ignore particles within 3 bonds. ignore.particles_within.contact = 1 # ignore particles within 1 contact. # ... parameters = [ # ... ]</description></item><item><title>VelocityVerlet</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/integrators/VelocityVerletIntegrator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/integrators/VelocityVerletIntegrator/</guid><description>VelocityVerlet # ニュートンの運動方程式に従い、エネルギー・体積・粒子数一定のシミュレーションを行います。
例 # [simulator] integrator.type = &amp;#34;VelocityVerlet&amp;#34; integrator.remove.translation = true integrator.remove.rotation = true integrator.remove.rescale = true 入力 # delta_tなどの他のパラメータは[simulator]で設定します。
type: 文字列型 Integratorの種類を指定します。&amp;quot;VelocityVerlet&amp;quot;です。 remove: テーブル型 (optional) translation: 論理値型 trueの場合、毎ステップ、系全体の並進速度成分を取り除きます。 rotation: 論理値型 trueの場合、毎ステップ、系全体の回転速度成分を取り除きます。 rescale: 論理値型 trueになっていた場合、全体の速度ベクトルをリスケールすることで速度を減算した分の運動エネルギーを補填します。 省略した場合、全てfalseになります。</description></item><item><title>PositionRestraint</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/external/PositionRestraintInteraction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/external/PositionRestraintInteraction/</guid><description>PositionRestraint # 粒子を空間中の点に、あるいは空間中のある点から一定距離に保つ相互作用です。
例 # [[forcefields.external]] interaction = &amp;#34;PositionRestraint&amp;#34; potential = &amp;#34;Harmonic&amp;#34; parameters = [ {index = 0, position = [0.0, 0.0, 0.0], k = 0.1, v0 = 10.0}, # ... ] 入力 # interaction: 文字列型 相互作用の名前です。&amp;quot;PositionRestraint&amp;quot;を指定します。 potential: 文字列型 点との距離に適用するポテンシャルを指定します。 &amp;quot;Harmonic&amp;quot;: 調和振動子ポテンシャルを使用します。 parameters: テーブルの配列型 index: 整数型 適用する粒子の番号を指定します。 offset: 整数型（省略可能） indicesに加算する値です。省略可能です。グループ内番号を使いたい場合に便利です。 position: 浮動小数点数の配列型 粒子を固定する位置を指定します。 k: 浮動小数点数型 ポテンシャルの強さを決めます。 v0: 浮動小数点数型 点からの距離を決めます。 点の位置に固定したい場合、0にしてください。</description></item><item><title>3SPN2Base</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/global/3SPN2BaseBaseInteraction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/global/3SPN2BaseBaseInteraction/</guid><description>3SPN2BaseBaseInteraction # 3SPN2BaseBaseInteractionは3SPN2系粗視化DNA力場の相互作用です。
以下のポテンシャルが利用可能です。
&amp;quot;3SPN2&amp;quot;: Hinckley et al., (2013) JCP &amp;quot;3SPN2C&amp;quot;: Freeman et al., (2014) JCP 例 # [[forcefields.global]] interaction = &amp;#34;3SPN2BaseBase&amp;#34; potential = &amp;#34;3SPN2&amp;#34; ignore.particles_within.nucleotide = 3 spatial_partition = {type = &amp;#34;CellList&amp;#34;, margin = 0.2} parameters = [ # `nucleotide` index starts from 5&amp;#39; and ends at 3&amp;#39;. {strand = 0, nucleotide = 0, S = 0, B = 1, offset = 100, Base = &amp;#34;A&amp;#34;}, {strand = 0, nucleotide = 1, P = 2, S = 3, B = 4, offset = 100, Base = &amp;#34;T&amp;#34;}, {strand = 0, nucleotide = 2, P = 5, S = 6, B = 7, offset = 100, Base = &amp;#34;C&amp;#34;}, # .</description></item><item><title>PDNS</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/global/ProteinDNANonSpecificInteraction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/global/ProteinDNANonSpecificInteraction/</guid><description>ProteinDNANonSpecificInteraction # ProteinDNANonSpecificInteractionは粗視化モデルにおいてDNAとタンパク質の間の水素結合をモデル化したものです。
以下の論文で導入されました。
T.Niina‡, G.B.Brandani‡, C.Tan and S.Takada, (2017) PLoS Comput Biol. (‡: co-1st) 例 # [[forcefields.global]] interaction = &amp;#34;PDNS&amp;#34; potential = &amp;#34;PDNS&amp;#34; spatial_partition.type = &amp;#34;VerletList&amp;#34; spatial_partition.margin = 0.5 sigma = 1.0 delta = 0.17453 parameters = [ {index = 2, kind = &amp;#34;DNA&amp;#34;, S3 = 1}, {index = 5, kind = &amp;#34;DNA&amp;#34;, S3 = 4}, # ... {index = 1000, offset = 100, kind = &amp;#34;Protein&amp;#34;, PN = 999, PC = 1001, k = -1.</description></item><item><title>AFMFitting</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/external/AFMFittingInteraction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/external/AFMFittingInteraction/</guid><description>AFMFittingInteraction # AFM画像への構造のフレキシブルフィッティングを行います。
以下の論文で提案されました。
T. Niina et al., JCTC (2020) \[\begin{aligned} U(\mathbf{r}) &amp;amp;= k(1 - \mathrm{c.c.}(\mathbf{r})) \\ \mathrm{c.c.} &amp;amp;= \frac{\sum_{p\in\mathrm{pixels}} H_p^{\mathrm{(exp)}} H_p^{\mathrm{(sim)}}(\mathbf{r})} {\sqrt{\sum_{p\in\mathrm{pixels}} \left(H_p^{\mathrm{(exp)}}\right)^2} \sqrt{\sum_{p\in\mathrm{pixels}} \left(H_p^{\mathrm{(sim)}}(\mathbf{r})\right)^2}} \\ H_p^{\mathrm{(sim)}}(\mathbf{r}) &amp;amp;= \gamma\log\left(1 &amp;#43; \sum_i^N \exp\left(\frac{-(x_i - x_p)^2 - (y_i - y_p)^2 }{2\sigma^2}\right)\exp\left(\frac{z_i &amp;#43; r_i}{\gamma}\right)\right) \end{aligned}\] 例 # [[forcefields.external]] interaction = &amp;#34;AFMFlexibleFitting&amp;#34; k = 100.0 gamma = 1.0 pixel_x = 10.0 pixel_y = 10.0 length_x = 5 length_y = 5 sigma_x = 2.</description></item><item><title>3SPN2 BaseStacking</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/3SPN2BaseStackingInteraction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/3SPN2BaseStackingInteraction/</guid><description>3SPN2BaseStackingInteraction # 3SPN2BaseStacking相互作用は、3SPN2系粗視化DNA力場で用いられるbase-stackingの力場です。
利用可能なポテンシャルは以下のものがあります。
&amp;quot;3SPN2&amp;quot; (Hinckley et al., (2013) JCP) &amp;quot;3SPN2C&amp;quot; (Freeman et al., (2014) JCP) 例 # [[forcefields.local]] interaction = &amp;#34;3SPN2BaseStacking&amp;#34; potential = &amp;#34;3SPN2&amp;#34; topology = &amp;#34;nucleotide&amp;#34; parameters = [ # `nucleotide` index starts from 5&amp;#39; and ends at 3&amp;#39;. {strand = 0, nucleotide = 0, S = 0, B = 1, offset = 100, Base = &amp;#34;A&amp;#34;}, {strand = 0, nucleotide = 1, P = 2, S = 3, B = 4, offset = 100, Base = &amp;#34;T&amp;#34;}, {strand = 0, nucleotide = 2, P = 5, S = 6, B = 7, offset = 100, Base = &amp;#34;C&amp;#34;}, {strand = 0, nucleotide = 3, P = 8, S = 9, B = 10, offset = 100, Base = &amp;#34;G&amp;#34;}, {strand = 1, nucleotide = 4, S = 11, B = 12, offset = 100, Base = &amp;#34;C&amp;#34;}, {strand = 1, nucleotide = 5, P = 13, S = 14, B = 15, offset = 100, Base = &amp;#34;G&amp;#34;}, {strand = 1, nucleotide = 6, P = 16, S = 17, B = 18, offset = 100, Base = &amp;#34;A&amp;#34;}, {strand = 1, nucleotide = 7, P = 19, S = 20, B = 21, offset = 100, Base = &amp;#34;T&amp;#34;}, ] 入力 # interaction: 文字列型 相互作用の種類を設定します。 &amp;quot;3SPN2BaseStacking&amp;quot;を指定します。 potential: 文字列型 ポテンシャルの種類を設定します。 3SPN2 : 3SPN.</description></item><item><title>PullingForce</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/external/PullingForceInteraction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/external/PullingForceInteraction/</guid><description>PullingForce # 指定した粒子に一定の力をかけ続けます。
例 # [[forcefields.external]] interaction = &amp;#34;PullingForce&amp;#34; parameters = [ {index = 0, force = [1.0, 0.0, 0.0]}, {index = 0, force = 1.0, direction = [1.0, 1.0, 1.0]}, # ... ] 入力 # interaction: 文字列型 相互作用の名前です。ここでは、&amp;quot;PullingForce&amp;quot;です。 parameters: テーブル型 index: 整数型 力をかける粒子のインデックスです。インデックスは0始まりです。 force: 浮動小数点数型または浮動小数点数の配列型 浮動小数点数の配列型が与えられた場合、力そのものを表します。 浮動小数点数型が与えられた場合、力の強さを表します。その場合、directionを与える必要があります。 単位は[units]で指定した単位系に従います（例えば、 kcal/mol/Å）. 1 kcal/mol/Å ~ 69.5 pN.</description></item><item><title>CoMPullingForce</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/external/CoMPullingForceInteraction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/external/CoMPullingForceInteraction/</guid><description>CoMPullingForce # 指定した複数の粒子の重心に対して力をかけ続けます。力は重み付けされて各粒子に分散されます。
例 # [[forcefields.external]] interaction = &amp;#34;CoMPullingForce&amp;#34; parameters = [ {indices = [0, 1, 2], force = [0.0, 0.0, 0.0144]}, {indices = &amp;#34;[0, 10)&amp;#34;, force = 0.0144, direction = [1.0, 1.0, 1.0]}, {indices = [&amp;#34;[0, 99]&amp;#34;, &amp;#34;[200, 300)&amp;#34;], force = 0.0144, direction = [1.0, 1.0, 1.0]}, # ... ] 入力 # interaction: 文字列型 相互作用の名前です。ここでは、&amp;quot;CoMPullingForce&amp;quot;です。 parameters: テーブル型 index: 整数型 indices: 整数型の配列、文字列、または文字列型の配列 力をかける粒子のインデックスです。インデックスは0始まりです。 整数型の配列が与えられた場合、それらがそのままインデックスとなります。 文字列が与えられた場合、区間として解釈されます。 &amp;quot;[0, 10)&amp;quot;は0から9までの半開区間と解釈されます。 文字列の配列が与えられた場合、それぞれの区間が結合されます。 粒子のインデックスにオーバーラップがあった場合、それは解消されユニークになります。 force: 浮動小数点数型または浮動小数点数の配列型 浮動小数点数の配列型が与えられた場合、力そのものを表します。 浮動小数点数型が与えられた場合、力の強さを表します。その場合、directionを与える必要があります。 単位は[units]で指定した単位系に従います（例えば、 kcal/mol/Å）.</description></item><item><title>Dummy</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/DummyInteraction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/DummyInteraction/</guid><description>DummyInteraction # Dummy相互作用は、何も計算しない相互作用です。利用可能なポテンシャルはありません。
これは、力場に必要な相互作用だけでは表現できないようなトポロジーを表現するために 用いることができます。つまり、これを使うと、実際には直接の相互作用がないような 粒子のペアに対して結合を加え、それを基準にnonbondedな相互作用に影響を与えること ができます。
トポロジーを指定しなかった（&amp;quot;none&amp;quot;にした）場合、この相互作用には何の意味も なくなります。
トポロジーの効果については、Topologyを参照して下さい。
例 # [[forcefields.local]] interaction = &amp;#34;Dummy&amp;#34; # No potential field required. topology = &amp;#34;bond&amp;#34; parameters = [ {indices = [0, 1], offset = 100}, # No other parameters. # ... ] 入力 # interaction: String 相互作用の名前です。&amp;quot;Dummy&amp;quot;を指定します。 topology: 文字列型 &amp;quot;Topology&amp;quot;に設定する名前を指定します。 parameters: テーブルの配列型 indices: 整数の配列型（長さ: 2） どの粒子の間の距離に適用するかを指定します。最初の粒子は0番目です。 offset: 整数型(省略可能) indicesに加算する値です。省略可能です。グループ内番号を使いたい場合に便利です。 ポテンシャルがないので、他のパラメータはありません。</description></item><item><title>Cosine</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/dihedral/CosinePotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/dihedral/CosinePotential/</guid><description>CosinePotential # HarmonicよりもDihedralAngleで用いやすい、周期的なポテンシャルです。
\[U(v) = k\left(1 &amp;#43; \cos(n(v - v_0))\right)\] 例 # [[forcefields.local]] interaction = &amp;#34;DihedralAngle&amp;#34; potential = &amp;#34;Cosine&amp;#34; topology = &amp;#34;none&amp;#34; parameters = [ {indices = [0, 1, 2, 3], v0 = 1.57, k = 10.0, n = 1}, ] 入力 # k: 浮動小数点数型 このポテンシャルの強さを指定します。 n: 整数 谷の個数を決めます。 v0: 浮動小数点数 谷の位置を決めます。 indices: 整数の配列型（長さ: 4） どの粒子の間に適用するかを指定します。最初の粒子は0番めです。 offset: 整数型（省略可能） インデックスに加算する値です。省略可能です。</description></item><item><title>Harmonic</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/bondangle/HarmonicPotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/bondangle/HarmonicPotential/</guid><description>HarmonicPotential # シンプルで、様々な用途で用いられる調和振動子ポテンシャルです。
\[U(v) = k(v-v_0)^2\] 例 # [[forcefields.local]] interaction = &amp;#34;BondAngle&amp;#34; potential = &amp;#34;Harmonic&amp;#34; topology = &amp;#34;none&amp;#34; parameters = [ {indices = [0, 1, 2], offset = 100, v0 = 1.0, k = 100.0}, # ... ] 入力 # k: 浮動小数点数型 ポテンシャルの強さを指定します。 v0: 浮動小数点数型 最安定点を指定します。 indices: 整数の配列型（長さ:3） どの粒子の間に適用するかを指定します。最初の粒子は0番めです。 offset: 整数型（省略可能） インデックスに加算する値です。省略可能です。</description></item><item><title>Harmonic</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/bondlength/HarmonicPotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/bondlength/HarmonicPotential/</guid><description>HarmonicPotential # シンプルで、様々な用途で用いられる調和振動子ポテンシャルです。
\[U(v) = k(v-v_0)^2\] 例 # [[forcefields.local]] interaction = &amp;#34;BondLength&amp;#34; potential = &amp;#34;Harmonic&amp;#34; topology = &amp;#34;bond&amp;#34; parameters = [ {indices = [0, 1], offset = 100, v0 = 1.0, k = 100.0}, # ... ] 入力 # k: 浮動小数点数型 ポテンシャルの強さを指定します。 v0: 浮動小数点数型 最安定点を指定します。 indices: 整数の配列型（長さ:2） どの粒子の間に適用するかを指定します。最初の粒子は0番めです。 offset: 整数型（省略可能） インデックスに加算する値です。省略可能です。</description></item><item><title>LennardJones</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/external/distance/LennardJonesWallPotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/external/distance/LennardJonesWallPotential/</guid><description>LennardJonesWallPotential # よく知られたLennard-Jonesポテンシャルです。
\[U(r) = 4\epsilon\left(\left(\frac{\sigma}{r}\right)^{12} - \left(\frac{\sigma}{r}\right)^{6}\right)\] 例 # [[forcefields.external]] interaction = &amp;#34;Distance&amp;#34; potential = &amp;#34;LennardJonesWall&amp;#34; shape.name = &amp;#34;AxisAlignedPlane&amp;#34; shape.axis = &amp;#34;X&amp;#34; shape.position = 0.0 shape.margin = 0.5 parameters = [ {index = 0, sigma = 1.0, epsilon = 0.1}, # ... ] 入力 # epsilon: 浮動小数点数 ポテンシャルの強さを決めます。 sigma: 浮動小数点数 粒子のサイズを決めます。</description></item><item><title>LennardJones</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/external/rectangularbox/LennardJonesWallPotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/external/rectangularbox/LennardJonesWallPotential/</guid><description>LennardJonesWallPotential # よく知られたLennard-Jonesポテンシャルです。
\[U(r) = 4\epsilon\left(\left(\frac{\sigma}{r}\right)^{12} - \left(\frac{\sigma}{r}\right)^{6}\right)\] 例 # [[forcefields.external]] interaction = &amp;#34;RectangularBox&amp;#34; box.lower = [ 0.0, 0.0, 0.0] box.upper = [100.0, 100.0, 100.0] box.margin = 0.4 potential = &amp;#34;LennardJonesWall&amp;#34; parameters = [ {index = 0, sigma = 1.0, epsilon = 0.1}, # ... ] 入力 # epsilon: 浮動小数点数 ポテンシャルの強さを決めます。 sigma: 浮動小数点数 粒子のサイズを決めます。</description></item><item><title>LennardJones</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/global/pair/LennardJonesPotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/global/pair/LennardJonesPotential/</guid><description>LennardJonesPotential # よく知られたLennard-Jonesポテンシャルです。
\[U(r) = 4\epsilon \left[\left(\frac{\sigma}{r}\right)^{12} - \left(\frac{\sigma}{r}\right)^6\right]\] 例 # [[forcefields.global]] interaction = &amp;#34;Pair&amp;#34; potential = &amp;#34;LennardJones&amp;#34; ignore.molecule = &amp;#34;Nothing&amp;#34; ignore.particles_within.bond = 3 ignore.particles_within.contact = 1 spatial_partition = {type = &amp;#34;CellList&amp;#34;, margin = 0.2} cutoff = 2.5 parameters = [ {index = 0, offset = 100, sigma = 2.0, epsilon = 10.0}, ] 入力 # \( \sigma \) と \( \epsilon \) の計算には、Lorentz-Berthelot則が用いられます。</description></item><item><title>ExcludedVolume</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/external/distance/ExcludedVolumeWallPotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/external/distance/ExcludedVolumeWallPotential/</guid><description>ExcludedVolumeWallPotential # 排除体積相互作用のポテンシャルです。
\[U(r) = \epsilon\left(\frac{r_0}{r}\right)^{12}\] 例 # [[forcefields.external]] interaction = &amp;#34;Distance&amp;#34; potential = &amp;#34;ExcludedVolumeWall&amp;#34; shape.name = &amp;#34;AxisAlignedPlane&amp;#34; shape.axis = &amp;#34;X&amp;#34; shape.position = 0.0 shape.margin = 0.5 epsilon = 0.5 parameters = [ {index = 0, radius = 1.0}, # ... ] 入力 # epsilon: 浮動小数点数型 ポテンシャルの強さを決めます。 radius: 浮動小数点数型 粒子の半径を決めます。</description></item><item><title>ExcludedVolume</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/external/rectangularbox/ExcludedVolumeWallPotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/external/rectangularbox/ExcludedVolumeWallPotential/</guid><description>ExcludedVolumeWallPotential # 排除体積相互作用のポテンシャルです。
\[U(r) = \epsilon\left(\frac{r_0}{r}\right)^{12}\] 例 # [[forcefields.external]] interaction = &amp;#34;RectangularBox&amp;#34; box.lower = [ 0.0, 0.0, 0.0] box.upper = [100.0, 100.0, 100.0] box.margin = 0.4 potential = &amp;#34;LennardJonesWall&amp;#34; epsilon = 0.5 parameters = [ {index = 0, radius = 1.0}, # ... ] 入力 # epsilon: 浮動小数点数型 ポテンシャルの強さを決めます。 radius: 浮動小数点数型 粒子の半径を決めます。</description></item><item><title>Gaussian</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/bondangle/GaussianPotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/bondangle/GaussianPotential/</guid><description>GaussianPotential # ガウシアンポテンシャルは以下のような形のポテンシャルです。
\[U(v) = k\exp\left(\frac{-(v - v_0)^2}{2\sigma^2}\right)\] 例 # [[forcefields.local]] interaction = &amp;#34;BondAngle&amp;#34; potential = &amp;#34;Gaussian&amp;#34; topology = &amp;#34;none&amp;#34; parameters = [ {indices = [0, 1, 2], v0 = 1.0, k = -100.0, sigma = 5.0}, # ... ] 入力 # k: 浮動小数点数型 ポテンシャルの強さを指定します。 sigma: 浮動小数点数型 ポテンシャルが効果を及ぼす幅を指定します。 v0: 浮動小数点数型 最安定点を指定します。 indices: 整数の配列型（長さ:3） どの粒子の間に適用するかを指定します。最初の粒子は0番めです。 offset: 整数型（省略可能） インデックスに加算する値です。省略可能です。</description></item><item><title>Gaussian</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/bondlength/GaussianPotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/bondlength/GaussianPotential/</guid><description>GaussianPotential # ガウシアンポテンシャルは以下のような形のポテンシャルです。
\[U(v) = k\exp\left(\frac{-(v - v_0)^2}{2\sigma^2}\right)\] 例 # [[forcefields.local]] interaction = &amp;#34;BondLength&amp;#34; potential = &amp;#34;Gaussian&amp;#34; topology = &amp;#34;none&amp;#34; parameters = [ {indices = [0, 1], v0 = 1.0, k = -100.0, sigma = 5.0}, # ... ] 入力 # k: 浮動小数点数型 ポテンシャルの強さを指定します。 sigma: 浮動小数点数型 ポテンシャルが効果を及ぼす幅を指定します。 v0: 浮動小数点数型 最安定点を指定します。 indices: 整数の配列型（長さ:2） どの粒子の間に適用するかを指定します。最初の粒子は0番めです。 offset: 整数型（省略可能） インデックスに加算する値です。省略可能です。</description></item><item><title>Gaussian</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/contact/GaussianPotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/contact/GaussianPotential/</guid><description>GaussianPotential # ガウシアンポテンシャルは以下のような形のポテンシャルです。
\[U(v) = k\exp\left(\frac{-(v - v_0)^2}{2\sigma^2}\right)\] 例 # [[forcefields.local]] interaction = &amp;#34;Contact&amp;#34; potential = &amp;#34;Gaussian&amp;#34; topology = &amp;#34;none&amp;#34; parameters = [ {indices = [0, 1], v0 = 1.0, k = -100.0, sigma = 5.0}, # ... ] 入力 # k: 浮動小数点数型 ポテンシャルの強さを指定します。 sigma: 浮動小数点数型 ポテンシャルが効果を及ぼす幅を指定します。 v0: 浮動小数点数型 最安定点を指定します。 indices: 整数の配列型（長さ:2） どの粒子の間に適用するかを指定します。最初の粒子は0番めです。 offset: 整数型（省略可能） インデックスに加算する値です。省略可能です。</description></item><item><title>Gaussian</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/dihedral/GaussianPotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/dihedral/GaussianPotential/</guid><description>GaussianPotential # ガウシアンポテンシャルは以下のような形のポテンシャルです。
\[U(v) = k\exp\left(\frac{-(v - v_0)^2}{2\sigma^2}\right)\] 例 # [[forcefields.local]] interaction = &amp;#34;DihedralAngle&amp;#34; potential = &amp;#34;Gaussian&amp;#34; topology = &amp;#34;none&amp;#34; parameters = [ {indices = [0, 1, 2, 3], v0 = 1.0, k = -100.0, sigma = 5.0}, # ... ] 入力 # k: 浮動小数点数型 ポテンシャルの強さを指定します。 sigma: 浮動小数点数型 ポテンシャルが効果を及ぼす幅を指定します。 v0: 浮動小数点数型 最安定点を指定します。 indices: 整数の配列型（長さ:4） どの粒子の間に適用するかを指定します。最初の粒子は0番めです。 offset: 整数型（省略可能） インデックスに加算する値です。省略可能です。</description></item><item><title>UniformLennardJones</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/global/pair/UniformLennardJonesPotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/global/pair/UniformLennardJonesPotential/</guid><description>UniformLennardJonesPotential # よく知られたLennard-Jonesポテンシャルです。
\[U(r) = 4\epsilon \left[\left(\frac{\sigma}{r}\right)^{12} - \left(\frac{\sigma}{r}\right)^6\right]\] 全ての粒子が同じパラメータを持っている場合のためのポテンシャルです。
例 # [[forcefields.global]] interaction = &amp;#34;Pair&amp;#34; potential = &amp;#34;UniformLennardJones&amp;#34; ignore.molecule = &amp;#34;Nothing&amp;#34; ignore.particles_within.bond = 3 ignore.particles_within.contact = 1 spatial_partition = {type = &amp;#34;CellList&amp;#34;, margin = 0.2} cutoff = 2.5 sigma = 2.0 epsilon = 0.5 parameters = [ {index = 0, offset = 100}, # to control which particle participates ] 入力 # index: 整数型 粒子の番号です。最初の粒子は0番目です。 offset: 整数型（省略可能） 番号のオフセットです。省略可能です。グループ内番号などを使う際に便利です。 sigma: 浮動小数点数型 粒子のサイズを指定します。 epsilon: 浮動小数点数型 ポテンシャルの強さを指定します。 cutoff: 浮動小数点数型（省略可能） カットオフ長です。 \(\sigma_{ij}\) に相対です。 入力の他の部分は、Pairを参照してください。</description></item><item><title>DebyeHückel</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/global/pair/DebyeHuckelPotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/global/pair/DebyeHuckelPotential/</guid><description>DebyeHückelPotential # Debye-Hückelの式に基づいた、イオン溶液内での静電相互作用のモデルです。
\[U(r_{ij}) = \frac{q_i q_j}{4\pi\epsilon_0\epsilon_k r_{ij}} \exp(-r_{ij}/\lambda_D)\] \[\lambda_D = \sqrt{\frac{\epsilon_0\epsilon_k}{2\beta N_A e_c^2 I}}\] 温度・イオン強度に依存した水の電気伝導度は以下の論文の式に従います。
Sambriski, E. J. et al., (2009) Biophys. J. Hinckley, D. M. et al., (2013) JCP. Freeman, G. S., et al., (2014) JCP. 例 # [[forcefields.global]] interaction = &amp;#34;Pair&amp;#34; potential = &amp;#34;DebyeHuckel&amp;#34; ignore.particles_within.bond = 3 spatial_partition.type = &amp;#34;CellList&amp;#34; spatial_partition.margin = 0.2 cutoff = 5.5 parameters = [ {index = 0, charge = 1.</description></item><item><title>FlexibleLocal</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/bondangle/FlexibleLocalAnglePotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/bondangle/FlexibleLocalAnglePotential/</guid><description>FlexibleLocalAngle # 粗視化タンパク質モデルで、フレキシブル領域の角度分布を再現するためのポテンシャルです。 角度分布を再現するため、値の表を内挿したものとして定義されています。
AICG2+粗視化タンパク質力場の一部として使われることが多いです。
以下の論文で開発されました。
T. Terakawa and S. Takada, (2011) Biophys J. 例 # [[forcefields.local]] interaction = &amp;#34;BondAngle&amp;#34; potential = &amp;#34;FlexibleLocalAngle&amp;#34; topology = &amp;#34;none&amp;#34; env.x = [ 1.3090, 1.4835, 1.6581, 1.8326, 2.0071, 2.1817, 2.3562, 2.5307, 2.7053, 2.8798] env.y1_ALA = [ 5.00, 1.34, 0.84, 1.17, 0.82, 1.00, 1.27, 1.52, 3.20, 10.00] env.y2_ALA = [ 0.00, 151.96, 14.61, -46.89, 39.04, -4.86, -1.86, 8.38, 250.03, 0.00] parameters = [ {indices = [0, 1, 2], k = 1.</description></item><item><title>FlexibleLocal</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/dihedral/FlexibleLocalDihedralPotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/dihedral/FlexibleLocalDihedralPotential/</guid><description>FlexibleLocalDihedral # 粗視化タンパク質モデルで、フレキシブル領域の角度分布を再現するためのポテンシャルです。 角度分布を再現するため、フーリエ級数展開の形で定義されています。
\[U(\phi) = C &amp;#43; \sum_{n=1}^{3}\left( k_n^{\sin} \sin(n\phi) &amp;#43; k_n^{\cos} \cos(n\phi)\right)\] AICG2+粗視化タンパク質力場の一部として使われることが多いです。
以下の論文で開発されました。
T. Terakawa and S. Takada, (2011) Biophys J 例 # [[forcefields.local]] parameters = [ {indices = [0,1,2,3], k = 1.0, coef = [2.2356, 0.4119, -0.1283, 0.0229, -0.2708, -0.0085, -0.0641]}, # ... ] 入力 # k: 浮動小数点数型 このポテンシャルの強さを指定します。 coef: 浮動小数点数の配列型（長さ: 7） 前から順に、 \( C, k_1^{\sin}, k_1^{\cos}, k_2^{\sin}, k_2^{\cos}, k_3^{\sin}, k_3^{\cos} \) です。 indices: 整数の配列型（長さ: 4） どの粒子の間に適用するかを指定します。最初の粒子は0番めです。 offset: 整数型（省略可能） インデックスに加算する値です。省略可能です。</description></item><item><title>GoContact</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/bondlength/GoContactPotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/bondlength/GoContactPotential/</guid><description>GoContactPotential # Go-コンタクトポテンシャルは以下のような形のポテンシャルです。
\[U(r) = k\left[5\left(\frac{r_0}{r}\right)^{12} - 6\left(\frac{r_0}{r}\right)^{10}\right]\] 粗視化分子動力学の構造依拠モデルで、参照構造で距離が近かった粒子同士のコンタクトとして用いられるポテンシャルです。
例 # [[forcefields.local]] interaction = &amp;#34;BondLength&amp;#34; potential = &amp;#34;GoContact&amp;#34; topology = &amp;#34;contact&amp;#34; parameters = [ {indices = [0, 1], v0 = 1.0, k = 0.1}, # ... ] 入力 # v0: 浮動小数点数型 最安定距離を指定します。 k: 浮動小数点数型 パラメータの強さを指定します。 indices: 整数の配列型（長さ: 2） どの粒子の間に適用するかを指定します。最初の粒子は0番めです。 offset: 整数型（省略可能） インデックスに加算する値です。省略可能です。</description></item><item><title>GoContact</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/contact/GoContactPotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/contact/GoContactPotential/</guid><description>GoContactPotential # Go-コンタクトポテンシャルは以下のような形のポテンシャルです。
\[U(r) = k\left[5\left(\frac{r_0}{r}\right)^{12} - 6\left(\frac{r_0}{r}\right)^{10}\right]\] 粗視化分子動力学の構造依拠モデルで、参照構造で距離が近かった粒子同士のコンタクトとして用いられるポテンシャルです。
例 # [[forcefields.local]] interaction = &amp;#34;Contact&amp;#34; potential = &amp;#34;GoContact&amp;#34; topology = &amp;#34;contact&amp;#34; parameters = [ {indices = [0, 1], v0 = 1.0, k = 0.1}, # ... ] 入力 # v0: 浮動小数点数型 最安定距離を指定します。 k: 浮動小数点数型 パラメータの強さを指定します。 indices: 整数の配列型（長さ: 2） どの粒子の間に適用するかを指定します。最初の粒子は0番めです。 offset: 整数型（省略可能） インデックスに加算する値です。省略可能です。</description></item><item><title>ImplicitMembrane</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/external/distance/ImplicitMembranePotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/external/distance/ImplicitMembranePotential/</guid><description>ImplicitMembranePotential # 平面の周りにある粒子をその疎水度に応じて安定化するimplicitな膜モデルです。
\[U(\mathbf{r}) = \sum_i^N k h_i \tanh\left(\mathrm{bend} * \left(|z_i - z_0| - \frac{\mathrm{thickness}}{2}\right)\right)\] 例 # [[forcefields.external]] interaction = &amp;#34;Distance&amp;#34; potential = &amp;#34;ImplicitMembrane&amp;#34; shape.name = &amp;#34;AxisAlignedPlane&amp;#34; shape.axis = &amp;#34;X&amp;#34; shape.position = 0.0 shape.margin = 0.5 bend = 1.0 thickness = 4.0 interaction_magnitude = 10.0 parameters = [ {index = 0, hydrophobicity = 1.0}, # ... ] 入力 # bend: 浮動小数点数 中央の安定化を受ける部分と外側の部分との間のスロープの傾きを決めます。 thickness: 浮動小数点数 中央の安定化を受ける部分の幅を決めます。 interaction_magnitude: 浮動小数点数 ポテンシャルの強さを決めます。上式の \( k \) です。 parameters: テーブルの配列型 index: 整数型 粒子の番号です。最初の粒子は0番目です。 hydrophobicity: 浮動小数点数型 粒子の疎水度です。上式の \( h \) です。 Remarks # This feature is developed by contributor, @yutakasi634.</description></item><item><title>AttractiveGo</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/bondlength/AttractiveGoContact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/bondlength/AttractiveGoContact/</guid><description>AttractiveGoContactPotential # Go-Contact potentialの引力項です。
\[U(r) = \begin{cases} -k &amp;amp; (r &amp;lt; r_0) \\ k\left[5\left(\frac{r_0}{r}\right)^{12} - 6\left(\frac{r_0}{r}\right)^{10}\right] &amp;amp; otherwise \end{cases}\] 例 # [[forcefields.local]] interaction = &amp;#34;BondLength&amp;#34; potential = &amp;#34;AttractiveGoContact&amp;#34; topology = &amp;#34;none&amp;#34; parameters = [ {indices = [0, 1], v0 = 1.0, k = 0.1}, # ... ] 入力 # v0: 浮動小数点数型 最安定距離を指定します。 k: 浮動小数点数型 パラメータの強さを指定します。 indices: 整数の配列型（長さ: 2） どの粒子の間に適用するかを指定します。最初の粒子は0番めです。 offset: 整数型（省略可能） インデックスに加算する値です。省略可能です。</description></item><item><title>AttractiveGo</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/contact/AttractiveGoContact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/contact/AttractiveGoContact/</guid><description>AttractiveGoContactPotential # Go-Contact potentialの引力項です。
\[U(r) = \begin{cases} -k &amp;amp; (r &amp;lt; r_0) \\ k\left[5\left(\frac{r_0}{r}\right)^{12} - 6\left(\frac{r_0}{r}\right)^{10}\right] &amp;amp; otherwise \end{cases}\] 例 # [[forcefields.local]] interaction = &amp;#34;Contact&amp;#34; potential = &amp;#34;AttractiveGoContact&amp;#34; topology = &amp;#34;none&amp;#34; parameters = [ {indices = [0, 1], v0 = 1.0, k = 0.1}, # ... ] 入力 # v0: 浮動小数点数型 最安定距離を指定します。 k: 浮動小数点数型 パラメータの強さを指定します。 indices: 整数の配列型（長さ: 2） どの粒子の間に適用するかを指定します。最初の粒子は0番めです。 offset: 整数型（省略可能） インデックスに加算する値です。省略可能です。</description></item><item><title>ClementiDihedral</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/dihedral/ClementiDihedralPotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/dihedral/ClementiDihedralPotential/</guid><description>ClementiDihedral # ClementiらによるOff-lattice Goモデルで使用されたポテンシャルです。
\[U(v) = k_1(1-\cos(v-v_0)) &amp;#43; k_3(1-\cos(3(v-v_0)))\] 以下の論文で提案されました。
C. Clementi, H. Nymeyer, J. Onuchic, (2000) JMB 例 # [[forcefields.local]] interaction = &amp;#34;DihedralAngle&amp;#34; potential = &amp;#34;ClementiDihedral&amp;#34; topology = &amp;#34;none&amp;#34; parameters = [ {indices = [0,1,2,3], v0 = -2.20, k1 = 1.0, k3 = 0.5}, # ... ] 入力 # v0: 浮動小数点数型 ポテンシャルの最安定点を決めます。 k1: 浮動小数点数型 このポテンシャルの強さを指定します。 k3: 浮動小数点数型 このポテンシャルの強さを指定します。 indices: 整数の配列型（長さ: 4） どの粒子の間に適用するかを指定します。最初の粒子は0番めです。 offset: 整数型（省略可能） インデックスに加算する値です。省略可能です。</description></item><item><title>ExcludedVolume</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/global/pair/ExcludedVolumePotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/global/pair/ExcludedVolumePotential/</guid><description>ExcludedVolume # 排除体積効果のポテンシャルです。
\[U(r) = \epsilon\left(\frac{\sigma}{r}\right)^{12}\] 例 # [[forcefields.global]] interaction = &amp;#34;Pair&amp;#34; potential = &amp;#34;ExcludedVolume&amp;#34; ignore.particles_within.bond = 3 ignore.particles_within.contact = 1 spatial_partition.type = &amp;#34;CellList&amp;#34; spatial_partition.margin = 0.2 cutoff = 2.5 epsilon = 0.2 parameters = [ {index = 0, radius = 2.0} ] 入力 # epsilon: 浮動小数点数型 ポテンシャルの強さを指定します。 index: 整数型 粒子のインデックスを指定します。 offset: 整数型（省略可能） インデックスのオフセットを指定します。 radius: 浮動小数点数型 粒子のサイズを指定します。 粒子ペアでの \( \sigma \) はradiusの和になります。 cutoff: 浮動小数点数型（省略可能） カットオフ長です。 \(\sigma_{ij}\) に相対です。 入力の他の部分は、Pairを参照してください。</description></item><item><title>InversePower</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/global/pair/InversePowerPotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/global/pair/InversePowerPotential/</guid><description>InversePowerPotential # Excluded Volumeポテンシャルの一般的な形です。
\[U(r) = \epsilon\left(\frac{\sigma}{r}\right)^{n}\] 例 # [[forcefields.global]] interaction = &amp;#34;Pair&amp;#34; potential = &amp;#34;InversePower&amp;#34; ignore.particles_within.bond = 3 ignore.particles_within.contact = 1 ignore.groups.intra = [&amp;#34;chain-A&amp;#34;] ignore.groups.inter = [[&amp;#34;chain-B&amp;#34;, &amp;#34;chain-C&amp;#34;]] spatial_partition.type = &amp;#34;CellList&amp;#34; spatial_partition.margin = 0.2 cutoff = 2.5 epsilon = 0.2 n = 5 parameters = [ {index = 0, radius = 2.0} ] 入力 # cutoff: 浮動小数点数型（省略可能。デフォルトで、 \(2^{\frac{12}{n}}\) ） カットオフ長です。 \( \sigma_{ij} \) との相対です。 epsilon: 浮動小数点数型 ポテンシャルの強さを決めます。 n: 整数型 ポテンシャルの傾きを決めます。 index: 整数型 粒子の番号です。最初の粒子は0番目です。 offset: 整数型（省略可能） 番号のオフセットです。省略可能です。グループ内番号などを使う際に便利です。 radius: 浮動小数点数型 粒子のサイズを決めます。 粒子ペアでの \( \sigma \) はradiusの和になります。 Remarks # This feature is developed by contributor, @yutakasi634.</description></item><item><title>RepulsiveGo</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/bondlength/RepulsiveGoContact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/bondlength/RepulsiveGoContact/</guid><description>RepulsiveGoContactPotential # Go-Contact potentialの斥力項です。
\[U(r) = \begin{cases} k\left[5\left(\frac{r_0}{r}\right)^{12} - 6\left(\frac{r_0}{r}\right)^{10} &amp;#43; 1\right] &amp;amp; r &amp;lt; r_0 \\ 0 &amp;amp; otherwise \end{cases}\] 例 # [[forcefields.local]] interaction = &amp;#34;BondLength&amp;#34; potential = &amp;#34;RepulsiveGoContact&amp;#34; topology = &amp;#34;contact&amp;#34; parameters = [ {indices = [0, 1], v0 = 1.0, k = 0.1}, # ... ] 入力 # v0: 浮動小数点数型 最安定距離を指定します。 k: 浮動小数点数型 パラメータの強さを指定します。 indices: 整数の配列型（長さ: 2） どの粒子の間に適用するかを指定します。最初の粒子は0番めです。 offset: 整数型（省略可能） インデックスに加算する値です。省略可能です。</description></item><item><title>RepulsiveGo</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/contact/RepulsiveGoContact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/contact/RepulsiveGoContact/</guid><description>RepulsiveGoContactPotential # Go-Contact potentialの斥力項です。
\[U(r) = \begin{cases} k\left[5\left(\frac{r_0}{r}\right)^{12} - 6\left(\frac{r_0}{r}\right)^{10} &amp;#43; 1\right] &amp;amp; r &amp;lt; r_0 \\ 0 &amp;amp; otherwise \end{cases}\] 例 # [[forcefields.local]] interaction = &amp;#34;Contact&amp;#34; potential = &amp;#34;RepulsiveGoContact&amp;#34; topology = &amp;#34;contact&amp;#34; parameters = [ {indices = [0, 1], v0 = 1.0, k = 0.1}, # ... ] 入力 # v0: 浮動小数点数型 最安定距離を指定します。 k: 浮動小数点数型 パラメータの強さを指定します。 indices: 整数の配列型（長さ: 2） どの粒子の間に適用するかを指定します。最初の粒子は0番めです。 offset: 整数型（省略可能） インデックスに加算する値です。省略可能です。</description></item><item><title>AttractiveMBasin</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/bondlength/AttractiveMBasinContact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/bondlength/AttractiveMBasinContact/</guid><description>AttractiveMBasinContactPotential # MultipleBasin力場で用いられる、Go-Contact potentialの引力項です。
\[U(r) = k\min\left(0, 5\left(\frac{r_0}{r}\right)^{12} - 6\left(\frac{r_0}{r}\right)^{10}\right)\] 例 # [[forcefields.local]] interaction = &amp;#34;Contact&amp;#34; potential = &amp;#34;AttractiveMBasinContact&amp;#34; topology = &amp;#34;none&amp;#34; parameters = [ {indices = [0, 1], v0 = 1.0, k = 0.1}, # ... ] 入力 # v0: 浮動小数点数型 最安定距離を指定します。 k: 浮動小数点数型 パラメータの強さを指定します。 indices: 整数の配列型（長さ: 2） どの粒子の間に適用するかを指定します。最初の粒子は0番めです。 offset: 整数型（省略可能） インデックスに加算する値です。省略可能です。</description></item><item><title>AttractiveMBasin</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/contact/AttractiveMBasinContact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/contact/AttractiveMBasinContact/</guid><description>AttractiveMBasinContactPotential # MultipleBasin力場で用いられる、Go-Contact potentialの引力項です。
\[U(r) = k\min\left(0, 5\left(\frac{r_0}{r}\right)^{12} - 6\left(\frac{r_0}{r}\right)^{10}\right)\] 例 # [[forcefields.local]] interaction = &amp;#34;Contact&amp;#34; potential = &amp;#34;AttractiveMBasinContact&amp;#34; topology = &amp;#34;none&amp;#34; parameters = [ {indices = [0, 1], v0 = 1.0, k = 0.1}, # ... ] 入力 # v0: 浮動小数点数型 最安定距離を指定します。 k: 浮動小数点数型 パラメータの強さを指定します。 indices: 整数の配列型（長さ: 2） どの粒子の間に適用するかを指定します。最初の粒子は0番めです。 offset: 整数型（省略可能） インデックスに加算する値です。省略可能です。</description></item><item><title>HardCore</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/global/pair/HardCoreExcludedVolumePotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/global/pair/HardCoreExcludedVolumePotential/</guid><description>HardCoreExcludedVolume # 中心に重なり合わない硬い核を持つ排除体積ポテンシャルです。
\[U(r) = \epsilon\left(\frac{\sigma}{r - r_0}\right)^{12}\] 例 # [[forcefields.global]] interaction = &amp;#34;Pair&amp;#34; potential = &amp;#34;HardCoreExcludedVolume&amp;#34; ignore.particles_within.bond = 3 ignore.particles_within.contact = 1 spatial_partition.type = &amp;#34;CellList&amp;#34; spatial_partition.margin = 0.2 cutoff = 2.5 epsilon = 0.2 parameters = [ {index = 0, core_radius = 3.0, soft_shell_thickness = 2.0}, {index = 1, core_radius = 3.0, soft_shell_thickness = 2.0}, ] 入力 # epsilon: 浮動小数点数型 ポテンシャルの強さを指定します。 index: 整数型 粒子のインデックスを指定します。 offset: 整数型（省略可能） インデックスのオフセットを指定します。 core_radius: 浮動小数点数型 核の半径です。上の式での \( r_0 \) に相当します。 粒子ペアでの \( r_0 \) はcore_radiusの和になります。 soft_shell_thickness: 浮動小数点数型 核の外側の半径です。上の式での \( \sigma \) に相当します。 粒子ペアでの \(\sigma_{ij}\) はsoft_shell_thicknessの和になります。 cutoff: 浮動小数点数型（省略可能） カットオフ長です。 \(\sigma_{ij}\) に相対です。 Remarks # This feature is developed by contributor, @yutakasi634.</description></item><item><title>RepulsiveMBasin</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/bondlength/RepulsiveMBasinContact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/bondlength/RepulsiveMBasinContact/</guid><description>RepulsiveMBasinContactPotential # MultipleBasin力場で用いられる、Go-Contact potentialの斥力項です。
\[U(r) = k\max\left(0, 5\left(\frac{r_0}{r}\right)^{12} - 6\left(\frac{r_0}{r}\right)^{10})\] 例 # [[forcefields.local]] interaction = &amp;#34;Contact&amp;#34; potential = &amp;#34;RepulsiveMBasinContact&amp;#34; topology = &amp;#34;contact&amp;#34; parameters = [ {indices = [0, 1], v0 = 1.0, k = 0.1}, # ... ] 入力 # v0: 浮動小数点数型 最安定距離を指定します。 k: 浮動小数点数型 パラメータの強さを指定します。 indices: 整数の配列型（長さ: 2） どの粒子の間に適用するかを指定します。最初の粒子は0番めです。 offset: 整数型（省略可能） インデックスに加算する値です。省略可能です。</description></item><item><title>RepulsiveMBasin</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/contact/RepulsiveMBasinContact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/contact/RepulsiveMBasinContact/</guid><description>RepulsiveMBasinContactPotential # MultipleBasin力場で用いられる、Go-Contact potentialの斥力項です。
\[U(r) = k\max\left(0, 5\left(\frac{r_0}{r}\right)^{12} - 6\left(\frac{r_0}{r}\right)^{10})\] 例 # [[forcefields.local]] interaction = &amp;#34;Contact&amp;#34; potential = &amp;#34;RepulsiveMBasinContact&amp;#34; topology = &amp;#34;contact&amp;#34; parameters = [ {indices = [0, 1], v0 = 1.0, k = 0.1}, # ... ] 入力 # v0: 浮動小数点数型 最安定距離を指定します。 k: 浮動小数点数型 パラメータの強さを指定します。 indices: 整数の配列型（長さ: 2） どの粒子の間に適用するかを指定します。最初の粒子は0番めです。 offset: 整数型（省略可能） インデックスに加算する値です。省略可能です。</description></item><item><title>WCA</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/global/pair/WCAPotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/global/pair/WCAPotential/</guid><description>WCAPotential # よく知られたWCA (Weeks-Chandler-Andersen) ポテンシャルです。Lennard-Jonesの斥力項のみを取り出した形のポテンシャルです。
\[U(r) = \begin{cases} 4\epsilon \left[\left(\frac{\sigma_{ij}}{r}\right)^{12} - \left(\frac{\sigma_{ij}}{r}\right)^6\right] &amp;#43; \epsilon &amp;amp; (r &amp;lt; \sigma_{ij}\sqrt[6]{2})\\ 0 &amp;amp; (r \geq \sigma_{ij}\sqrt[6]{2})\\ \end{cases}\] 例 # パラメータを指定するには二通りの方法があります。
個々の粒子のパラメータを指定し、Lorentz-Berthelot則でペアのパラメータを計算する方法と、
[[forcefields.global]] interaction = &amp;#34;Pair&amp;#34; potential = &amp;#34;WCA&amp;#34; ignore.molecule = &amp;#34;Nothing&amp;#34; ignore.particles_within.bond = 3 ignore.particles_within.contact = 1 spatial_partition = {type = &amp;#34;CellList&amp;#34;, margin = 0.2} parameters = [ {index = 0, offset = 100, sigma = 2.</description></item><item><title>LennardJonesAttractive</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/global/pair/LennardJonesAttractivePotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/global/pair/LennardJonesAttractivePotential/</guid><description>LennardJonesAttractivePotential # Lennard-Jonesポテンシャルの引力項のみを取り出した形のポテンシャルです。
\[U(r) = \begin{cases} -\epsilon &amp;amp; (r &amp;lt; \sigma_{ij}\sqrt[6]{2})\\ 4\epsilon \left[\left(\frac{\sigma_{ij}}{r}\right)^{12} - \left(\frac{\sigma_{ij}}{r}\right)^6\right] &amp;#43; \epsilon &amp;amp; (\sigma_{ij}\sqrt[6]{2} &amp;lt; r) \end{cases}\] 例 # パラメータを指定するには二通りの方法があります。
個々の粒子のパラメータを指定し、Lorentz-Berthelot則でペアのパラメータを計算する方法と、
[[forcefields.global]] interaction = &amp;#34;Pair&amp;#34; potential = &amp;#34;LennardJonesAttractive&amp;#34; ignore.molecule = &amp;#34;Nothing&amp;#34; ignore.particles_within.bond = 3 ignore.particles_within.contact = 1 spatial_partition = {type = &amp;#34;CellList&amp;#34;, margin = 0.2} cutoff = 2.5 parameters = [ {index = 0, offset = 100, sigma = 2.</description></item><item><title>WormLikeChain</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/bondlength/WormLikeChainPotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/bondlength/WormLikeChainPotential/</guid><description>WormLikeChain # Worm-Like chain modelに基づいたポテンシャルです。
\[U(r) = \frac{k_B T}{p} \left(\frac{l_c}{4} \left[ \frac{1}{1 - \frac{r}{l_c}} - 1 \right] - \frac{r}{4} &amp;#43; \frac{r^2}{2l_c}\right)\] 例 # [[forcefields.local]] interaction = &amp;#34;BondLength&amp;#34; potential = &amp;#34;WormLikeChain&amp;#34; topology = &amp;#34;bond&amp;#34; parameters = [ {indices = [0, 1], offset = 100, p = 5.0, lc = 100.0}, # ... ] 入力 # p: 浮動小数点数型 ポリマーの持続長です。 lc: 浮動小数点数型 ポリマーの最大長です。 indices: 整数の配列型（長さ: 2） どの粒子の間に適用するかを指定します。最初の粒子は0番めです。 offset: 整数型（省略可能） インデックスに加算する値です。省略可能です。 Remarks # This feature is developed by contributor, @yutakasi634.</description></item><item><title>iSoLF</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/global/pair/iSoLFAttractivePotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/global/pair/iSoLFAttractivePotential/</guid><description>iSoLFAttractivePotential # iSoLFは以下の文献で開発された粗視化膜モデルで、iSoLFAttractiveはその引力ポテンシャルです。
Diego Ugarte La Torre and Shoji Takada (2020) J. Chem. Phys 153, 205101 https://doi.org/10.1063/5.0026342 \[U(r) = \begin{cases} -\epsilon_{ij} &amp;amp; r_{ij} &amp;lt; \sqrt[6]{2}\sigma_{ij}\\ -\epsilon_{ij} \cos^2\left[\frac{\pi}{2\omega_{ij}}(r_{ij} - \sqrt[6]{2}\sigma_{ij}) \right] &amp;amp; (\sqrt[6]{2}\sigma_{ij} &amp;lt; r_{ij} &amp;lt; \sqrt[6]{2}\sigma_{ij} &amp;#43; \omega_{ij})\\ 0 &amp;amp; (\sqrt[6]{2}\sigma_{ij} &amp;#43; \omega_{ij} &amp;lt; r_{ij}) \end{cases}\] 例 # [[forcefields.global]] interaction = &amp;#34;Pair&amp;#34; potential = &amp;#34;iSoLFAttractive&amp;#34; ignore.particles_within = {bond = 1, angle = 1} ignore.</description></item><item><title>WormLikeChainOffset</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/bondlength/WormLikeChainOffsetPotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/bondlength/WormLikeChainOffsetPotential/</guid><description>WormLikeChainOffset # Worm-Like chain modelに基づいた、二粒子間の距離に関するオフセットを考慮したポテンシャルです。
\[U(r) = \begin{cases} 0 &amp;amp; (r &amp;lt; l_0) \\ \frac{k_B T}{p} \left(\frac{l_c}{4} \left[ \frac{1}{1 - \frac{r - l_0}{l_c}} - 1 \right] - \frac{r - l_0}{4} &amp;#43; \frac{\left(r - l_0\right)^2}{2l_c}\right) &amp;amp; (r \geq l_0) \\ \end{cases}\] 例 # [[forcefields.local]] interaction = &amp;#34;BondLength&amp;#34; potential = &amp;#34;WormLikeChainOffset&amp;#34; topology = &amp;#34;bond&amp;#34; parameters = [ {indices = [0, 1], offset = 100, p = 5.</description></item><item><title>3SPN2Bond</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/bondlength/3SPN2BondPotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/local/bondlength/3SPN2BondPotential/</guid><description>3SPN2BondPotential # 3SPN2ポテンシャルの一部分です。
\[U(v) = k(v - v_0)^2 &amp;#43; 100k (v - v_0)^4\] 例 # [[forcefields.local]] interaction = &amp;#34;BondLength&amp;#34; potential = &amp;#34;3SPN2Bond&amp;#34; topology = &amp;#34;bond&amp;#34; parameters = [ {indices = [0, 1], offset = 100, v0 = 1.0, k = 10.0}, # ... ] 入力 # k: 浮動小数点数型 パラメータの強さを指定します。 v0: 浮動小数点数型 最安定距離を指定します。 indices: 整数の配列型（長さ: 2） どの粒子の間に適用するかを指定します。最初の粒子は0番めです。 offset: 整数型（省略可能） インデックスに加算する値です。省略可能です。</description></item><item><title>3SPN2ExcludedVolume</title><link>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/global/pair/3SPN2ExcludedVolumePotential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://mjolnir-md.github.io/Mjolnir/ja/docs/reference/forcefields/global/pair/3SPN2ExcludedVolumePotential/</guid><description>3SPN2ExcludedVolumePotential # 3SPN2粗視化DNAモデルの排除体積ポテンシャルです。
\[U(r) = \begin{cases} \epsilon \left[\left(\frac{\sigma_{ij}}{r}\right)^{12} - 2\left(\frac{\sigma_{ij}}{r}\right)^6\right] &amp;#43; \epsilon &amp;amp; (r &amp;lt; \sigma_{ij})\\ 0 &amp;amp; (r \geq \sigma_{ij})\\ \end{cases}\] 例 # [[forcefields.global]] interaction = &amp;#34;Pair&amp;#34; potential = &amp;#34;3SPN2ExcludedVolume&amp;#34; ignore.particles_within.bond = 1 ignore.particles_within.angle = 1 ignore.particles_within.dihedral = 1 ignore.particles_within.nucleotide = 1 spatial_partition = {type = &amp;#34;CellList&amp;#34;, margin = 0.4} parameters = [ {index = 0, kind = &amp;#34;S&amp;#34;}, {index = 1, kind = &amp;#34;A&amp;#34;}, {index = 2, kind = &amp;#34;P&amp;#34;}, {index = 3, kind = &amp;#34;S&amp;#34;}, ] 入力 # index: 整数型 粒子のインデックスを指定します。 offset: 整数型（省略可能） インデックスのオフセットを指定します。 kind: 文字列 以下のどれかです。 &amp;quot;S&amp;quot;(sugar) &amp;quot;P&amp;quot;(phosphate) &amp;quot;A&amp;quot;(アデニン塩基).</description></item></channel></rss>